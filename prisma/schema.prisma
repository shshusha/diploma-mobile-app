generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  phone          String?
  telegramChatId Int? // Telegram chat ID for sending notifications
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  alerts            Alert[]
  locations         Location[]
  emergencyContacts EmergencyContact[]
  detectionRules    DetectionRule[]

  @@map("users")
}

model Alert {
  id         String    @id @default(cuid())
  userId     String
  type       AlertType
  severity   Severity
  message    String
  latitude   Float?
  longitude  Float?
  isResolved Boolean   @default(false)
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model Location {
  id        String   @id @default(cuid())
  userId    String
  latitude  Float
  longitude Float
  accuracy  Float?
  speed     Float?
  heading   Float?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("locations")
}

model EmergencyContact {
  id       String  @id @default(cuid())
  userId   String
  name     String
  phone    String
  email    String?
  relation String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model DetectionRule {
  id                String  @id @default(cuid())
  userId            String
  fallSensitivity   Float   @default(0.8)
  immobilityTimeout Int     @default(300) // seconds
  isActive          Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("detection_rules")
}

enum AlertType {
  SEVERE_WEATHER_WARNING
  FLOOD_WARNING
  TORNADO_WARNING
  HURRICANE_WARNING
  EARTHQUAKE_ALERT
  TSUNAMI_WARNING
  WILDFIRE_ALERT
  CIVIL_EMERGENCY
  AMBER_ALERT
  SILVER_ALERT
  TERRORISM_ALERT
  HAZMAT_INCIDENT
  INFRASTRUCTURE_FAILURE
  PUBLIC_HEALTH_EMERGENCY
  EVACUATION_ORDER
  SHELTER_IN_PLACE
  ROAD_CLOSURE
  POWER_OUTAGE
  WATER_EMERGENCY
}

enum Severity {
  INFO
  ADVISORY
  WATCH
  WARNING
  EMERGENCY
  CRITICAL
}
